(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{408:function(t,e,a){"use strict";a.r(e);var n=a(0),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"基础：vue-js-组件的三个-api：prop、event、slot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础：vue-js-组件的三个-api：prop、event、slot","aria-hidden":"true"}},[t._v("#")]),t._v(" 基础：Vue.js 组件的三个 API：prop、event、slot")]),t._v(" "),a("blockquote",[a("p",[t._v("如果您已经对 Vue.js 组件的基础用法了如指掌，可以跳过本小节，不过当做复习稍读一下也无妨。")])]),t._v(" "),a("h2",{attrs:{id:"组件的构成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件的构成","aria-hidden":"true"}},[t._v("#")]),t._v(" 组件的构成")]),t._v(" "),a("p",[t._v("一个再复杂的组件，都是由三部分组成的：prop、event、slot，它们构成了 Vue.js 组件的 API。如果你开发的是一个通用组件，那一定要事先设计好这三部分，因为组件一旦发布，后面再修改 API 就很困难了，使用者都是希望不断新增功能，修复 bug，而不是经常变更接口。如果你阅读别人写的组件，也可以从这三个部分展开，它们可以帮助你快速了解一个组件的所有功能。")]),t._v(" "),a("h3",{attrs:{id:"属性-prop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性-prop","aria-hidden":"true"}},[t._v("#")]),t._v(" 属性 prop")]),t._v(" "),a("p",[a("code",[t._v("prop")]),t._v(" 定义了这个组件有哪些可配置的属性，组件的核心功能也都是它来确定的。写通用组件时，props 最好用"),a("strong",[t._v("对象")]),t._v("的写法，这样可以针对每个属性设置类型、默认值或自定义校验属性的值，这点在组件开发中很重要，然而很多人却忽视，直接使用 props 的数组用法，这样的组件往往是不严谨的。比如我们封装一个按钮组件 "),a("code",[t._v("<i-button>")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<template>\n  <button :class=\"'i-button-size' + size\" :disabled=\"disabled\"></button>\n</template>\n<script>\n  // 判断参数是否是其中之一\n  function oneOf (value, validList) {\n    for (let i = 0; i < validList.length; i++) {\n      if (value === validList[i]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  export default {\n    props: {\n      size: {\n        validator (value) {\n          return oneOf(value, ['small', 'large', 'default']);\n        },\n        default: 'default'\n      },\n      disabled: {\n        type: Boolean,\n        default: false\n      }\n    }\n  }\n<\/script>\n\n")])])]),a("p",[t._v("使用组件：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<i-button size="large"></i-button>\n<i-button disabled></i-button>\n\n')])])]),a("p",[t._v("组件中定义了两个属性：尺寸 size 和 是否禁用 disabled。其中 size 使用 "),a("code",[t._v("validator")]),t._v(" 进行了值的自定义验证，也就是说，从父级传入的 size，它的值必须是指定的 "),a("strong",[t._v("small、large、default")]),t._v(" 中的一个，默认值是 default，如果传入这三个以外的值，都会抛出一条警告。")]),t._v(" "),a("p",[t._v("要注意的是，组件里定义的 props，都是"),a("strong",[t._v("单向数据流")]),t._v("，也就是只能通过父级修改，组件自己不能修改 props 的值，只能修改定义在 data 里的数据，非要修改，也是通过后面介绍的自定义事件通知父级，由父级来修改。")]),t._v(" "),a("p",[t._v("在使用组件时，也可以传入一些标准的 html 特性，比如 "),a("strong",[t._v("id")]),t._v("、"),a("strong",[t._v("class")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<i-button id="btn1" class="btn-submit"></i-button>\n\n')])])]),a("p",[t._v("这样的 html 特性，在组件内的 "),a("code",[t._v("<button>")]),t._v(" 元素上会继承，并不需要在 props 里再定义一遍。这个特性是默认支持的，如果不期望开启，在组件选项里配置 "),a("code",[t._v("inheritAttrs: false")]),t._v(" 就可以禁用了。")]),t._v(" "),a("h3",{attrs:{id:"插槽-slot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插槽-slot","aria-hidden":"true"}},[t._v("#")]),t._v(" 插槽 slot")]),t._v(" "),a("p",[t._v("如果要给上面的按钮组件 "),a("code",[t._v("<i-button>")]),t._v(" 添加一些文字内容，就要用到组件的第二个 API：插槽 slot，它可以分发组件的内容，比如在上面的按钮组件中定义一个插槽：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<template>\n  <button :class="\'i-button-size\' + size" :disabled="disabled">\n    <slot></slot>\n  </button>\n</template>\n\n')])])]),a("p",[t._v("这里的 "),a("code",[t._v("<slot>")]),t._v(" 节点就是指定的一个插槽的位置，这样在组件内部就可以扩展内容了：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<i-button>按钮 1</i-button>\n<i-button>\n  <strong>按钮 2</strong>\n</i-button>\n\n")])])]),a("p",[t._v("当需要多个插槽时，会用到具名 slot，比如上面的组件我们再增加一个 slot，用于设置另一个图标组件：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<template>\n  <button :class="\'i-button-size\' + size" :disabled="disabled">\n    <slot name="icon"></slot>\n    <slot></slot>\n  </button>\n</template>\n\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<i-button>\n  <i-icon slot="icon" type="checkmark"></i-icon>\n  按钮 1\n</i-button>\n\n')])])]),a("p",[t._v("这样，父级内定义的内容，就会出现在组件对应的 slot 里，没有写名字的，就是默认的 slot。")]),t._v(" "),a("p",[t._v("在组件的 "),a("code",[t._v("<slot>")]),t._v(" 里也可以写一些默认的内容，这样在父级没有写任何 slot 时，它们就会出现，比如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<slot>提交</slot>\n\n")])])]),a("h3",{attrs:{id:"自定义事件-event"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义事件-event","aria-hidden":"true"}},[t._v("#")]),t._v(" 自定义事件 event")]),t._v(" "),a("p",[t._v("现在我们给组件 "),a("code",[t._v("<i-button>")]),t._v(" 加一个点击事件，目前有两种写法，我们先看自定义事件 event（部分代码省略）：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<template>\n  <button @click=\"handleClick\">\n    <slot></slot>\n  </button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleClick (event) {\n        this.$emit('on-click', event);\n      }\n    }\n  }\n<\/script>\n\n")])])]),a("p",[t._v("通过 "),a("code",[t._v("$emit")]),t._v("，就可以触发自定义的事件 "),a("code",[t._v("on-click")]),t._v(" ，在父级通过 "),a("code",[t._v("@on-click")]),t._v(" 来监听：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<i-button @on-click="handleClick"></i-button>\n\n')])])]),a("p",[t._v("上面的 click 事件，是在组件内部的 "),a("code",[t._v("<button>")]),t._v(" 元素上声明的，这里还有另一种方法，直接在父级声明，但为了区分原生事件和自定义事件，要用到事件修饰符 "),a("code",[t._v(".native")]),t._v("，所以上面的示例也可以这样写：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<i-button @click.native="handleClick"></i-button>\n\n')])])]),a("p",[t._v("如果不写 "),a("code",[t._v(".native")]),t._v(" 修饰符，那上面的 "),a("code",[t._v("@click")]),t._v(" 就是"),a("strong",[t._v("自定义事件")]),t._v(" click，而非"),a("strong",[t._v("原生事件")]),t._v(" click，但我们在组件内只触发了 "),a("code",[t._v("on-click")]),t._v(" 事件，而不是 "),a("code",[t._v("click")]),t._v("，所以直接写 "),a("code",[t._v("@click")]),t._v(" 会监听不到。")]),t._v(" "),a("h2",{attrs:{id:"组件的通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件的通信","aria-hidden":"true"}},[t._v("#")]),t._v(" 组件的通信")]),t._v(" "),a("p",[t._v("一般来说，组件可以有以下几种关系：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/10/18/166864d066bbcf69?w=790&h=632&f=png&s=36436",alt:"组件关系"}})]),t._v(" "),a("p",[t._v("A 和 B、B 和 C、B 和 D 都是父子关系，C 和 D 是兄弟关系，A 和 C 是隔代关系（可能隔多代）。组件间经常会通信，Vue.js 内置的通信手段一般有两种：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("ref")]),t._v("：给元素或组件注册引用信息；")]),t._v(" "),a("li",[a("code",[t._v("$parent")]),t._v(" / "),a("code",[t._v("$children")]),t._v("：访问父 / 子实例。")])]),t._v(" "),a("p",[t._v("这两种都是直接得到组件实例，使用后可以直接调用组件的方法或访问数据，比如下面的示例中，用 ref 来访问组件（部分代码省略）：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// component-a\nexport default {\n  data () {\n    return {\n      title: 'Vue.js'\n    }\n  },\n  methods: {\n    sayHello () {\n      window.alert('Hello');\n    }\n  }\n}\n\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<template>\n  <component-a ref="comA"></component-a>\n</template>\n<script>\n  export default {\n    mounted () {\n      const comA = this.$refs.comA;\n      console.log(comA.title);  // Vue.js\n      comA.sayHello();  // 弹窗\n    }\n  }\n<\/script>\n\n')])])]),a("p",[a("code",[t._v("$parent")]),t._v(" 和 "),a("code",[t._v("$children")]),t._v(" 类似，也是基于当前上下文访问父组件或全部子组件的。")]),t._v(" "),a("p",[t._v("这两种方法的弊端是，无法在"),a("strong",[t._v("跨级")]),t._v("或"),a("strong",[t._v("兄弟")]),t._v("间通信，比如下面的结构：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// parent.vue\n<component-a></component-a>\n<component-b></component-b>\n<component-b></component-b>\n\n")])])]),a("p",[t._v("我们想在 component-a 中，访问到引用它的页面中（这里就是 parent.vue）的两个 component-b 组件，那这种情况下，就得配置额外的插件或工具了，比如 Vuex 和 Bus 的解决方案，本小册不再做它们的介绍，读者可以自行阅读相关内容。不过，它们都是依赖第三方插件的存在，这在开发独立组件时是不可取的，而在小册的后续章节，会陆续介绍一些黑科技，它们完全不依赖任何三方插件，就可以轻松得到任意的组件实例，或在任意组件间进行通信，且适用于任意场景。")]),t._v(" "),a("h2",{attrs:{id:"结语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结语","aria-hidden":"true"}},[t._v("#")]),t._v(" 结语")]),t._v(" "),a("p",[t._v("本小节带您复习了 Vue.js 组件的核心知识点，虽然这并没有完全覆盖 Vue.js 的 API，但对于组件开发来说已经足够了，后续章节也会陆续扩展更多的用法。")]),t._v(" "),a("p",[t._v("基于 Vue.js 开发独立组件，并不是新奇的挑战，坦率地讲，它本质上还是 JavaScript。掌握了 Vue.js 组件的这三个 API 后，剩下的便是程序的设计。在组件开发中，最难的环节应当是解耦组件的交互逻辑，尽量把复杂的逻辑分发到不同的子组件中，然后彼此建立联系，在这其中，计算属性（computed）和混合（mixins）是两个重要的技术点，合理利用，就能发挥出 Vue.js 语言的最大特点：把状态（数据）的维护交给 Vue.js 处理，我们只专注在交互上。")]),t._v(" "),a("p",[t._v("当您最终读完本小册时，应该会总结出和笔者一样的感悟：Vue.js 组件开发，玩到最后还是在拼 JavaScript 功底。对于每一位使用 Vue.js 的开发者来说，阅读完本小册都可以尝试开发和维护一套属于自己的组件库，并乐在其中，而且你会越发觉得，一个组件或一套组件库，就是融合了前端精髓的产出。")]),t._v(" "),a("h2",{attrs:{id:"扩展阅读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展阅读","aria-hidden":"true"}},[t._v("#")]),t._v(" 扩展阅读")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://juejin.im/post/5a4353766fb9a044fb080927",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue 组件通信之 Bus"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/entry/58cb4c36b123db00532076a2",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vuex 通俗版教程"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=s.exports}}]);