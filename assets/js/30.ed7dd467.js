(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{576:function(t,e,n){"use strict";n.r(e);var a=n(18),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"组件的通信-2-派发与广播-自行实现-dispatch-和-broadcast-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组件的通信-2-派发与广播-自行实现-dispatch-和-broadcast-方法"}},[t._v("#")]),t._v(" 组件的通信 2：派发与广播——自行实现 dispatch 和 broadcast 方法")]),t._v(" "),n("p",[t._v("上一讲的 provide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。然后有两种场景它不能很好的解决：")]),t._v(" "),n("ul",[n("li",[t._v("父组件向子组件（支持跨级）传递数据；")]),t._v(" "),n("li",[t._v("子组件向父组件（支持跨级）传递数据。")])]),t._v(" "),n("p",[t._v("这种父子（含跨级）传递数据的通信方式，Vue.js 并没有提供原生的 API 来支持，而是推荐使用大型数据状态管理工具 Vuex，而我们之前已经介绍过 Vuex 的场景与在独立组件（或库）中使用的限制。本小节则介绍一种在父子组件间通信的方法 "),n("code",[t._v("dispatch")]),t._v(" 和 "),n("code",[t._v("broadcast")]),t._v("。")]),t._v(" "),n("h2",{attrs:{id:"on-与-emit"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#on-与-emit"}},[t._v("#")]),t._v(" $on 与 $emit")]),t._v(" "),n("p",[t._v("如果您使用过较早的 Vue.js 1.x 版本，肯定对 "),n("em",[t._v("$dispatch")]),t._v(" 和 "),n("em",[t._v("$broadcast")]),t._v(" 这两个内置的方法很熟悉，不过它们都在 Vue.js 2.x 里废弃了。在正式介绍主角前，我们先看看 "),n("code",[t._v("$on")]),t._v(" 与 "),n("code",[t._v("$emit")]),t._v(" 这两个 API，因为它们是本节内容的基础。")]),t._v(" "),n("p",[n("code",[t._v("$emit")]),t._v(" 会在"),n("strong",[t._v("当前组件")]),t._v("实例上触发自定义事件，并传递一些参数给监听器的回调，一般来说，都是在父级调用这个组件时，使用 "),n("code",[t._v("@on")]),t._v(" 的方式来监听自定义事件的，比如在子组件中触发事件：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// child.vue，部分代码省略\nexport default {\n  methods: {\n    handleEmitEvent () {\n      this.$emit('test', 'Hello Vue.js');\n    }\n  }\n}\n\n")])])]),n("p",[t._v("在父组件中监听由 "),n("em",[t._v("child.vue")]),t._v(" 触发的自定义事件 "),n("strong",[t._v("test")]),t._v("：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('\x3c!-- parent.vue，部分代码省略--\x3e\n<template>\n  <child-component @test="handleEvent">\n</template>\n<script>\n  export default {\n    methods: {\n      handleEvent (text) {\n      \tconsole.log(text);  // Hello Vue.js\n      }\n    }\n  }\n<\/script>\n\n')])])]),n("p",[t._v("这里看似是在父组件 "),n("em",[t._v("parent.vue")]),t._v(" 中绑定的自定义事件 "),n("strong",[t._v("test")]),t._v(" 的处理句柄，然而事件 test 并不是在父组件上触发的，而是在子组件 "),n("em",[t._v("child.vue")]),t._v(" 里触发的，只是通过 "),n("code",[t._v("v-on")]),t._v(" 在父组件中监听。既然是子组件自己触发的，那它自己也可以监听到，这就要使用 "),n("code",[t._v("$on")]),t._v(" 来监听实例上的事件，换言之，组件使用 "),n("code",[t._v("$emit")]),t._v(" 在自己实例上触发事件，并用 "),n("code",[t._v("$on")]),t._v(" 监听它。")]),t._v(" "),n("p",[t._v("听起来这种神（sāo）操作有点多此一举，我们不妨先来看个示例：")]),t._v(" "),n("p",[t._v("（也可通过在线链接 "),n("a",{attrs:{href:"https://run.iviewui.com/ggsomfHM",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://run.iviewui.com/ggsomfHM"),n("OutboundLink")],1),t._v(" 直接运行该示例）")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<template>\n  <div>\n    <button @click=\"handleEmitEvent\">触发自定义事件</button>\n  </div>\n</template>\n<script>\n  export default {\n    methods: {\n      handleEmitEvent () {\n        // 在当前组件上触发自定义事件 test，并传值\n        this.$emit('test', 'Hello Vue.js')\n      }\n    },\n    mounted () {\n      // 监听自定义事件 test\n      this.$on('test', (text) => {\n        window.alert(text);\n      });\n    }\n  }\n<\/script>\n\n")])])]),n("p",[n("code",[t._v("$on")]),t._v(" 监听了自己触发的自定义事件 test，因为有时不确定何时会触发事件，一般会在 "),n("code",[t._v("mounted")]),t._v(" 或 "),n("code",[t._v("created")]),t._v(" 钩子中来监听。")]),t._v(" "),n("p",[t._v("仅上面的示例，的确是多此一举的，因为大可在 handleEmitEvent 里直接写 window.alert(text)，没必要绕一圈。")]),t._v(" "),n("p",[t._v("之所以多此一举，是因为 handleEmitEvent 是当前组件内的 "),n("code",[t._v("<button>")]),t._v(" 调用的，如果这个方法不是它自己调用，而是其它组件调用的，那这个用法就大有可为了。")]),t._v(" "),n("p",[t._v("了解了 "),n("code",[t._v("$on")]),t._v(" 和 "),n("code",[t._v("$emit")]),t._v(" 的用法后，我们再来看两个“过时的” API。")]),t._v(" "),n("h2",{attrs:{id:"vue-js-1-x-的-dispatch-与-broadcast"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue-js-1-x-的-dispatch-与-broadcast"}},[t._v("#")]),t._v(" Vue.js 1.x 的 $dispatch 与 $broadcast")]),t._v(" "),n("p",[t._v("虽然 Vue.js 1.x 已经成为过去时，但为了充分理解本节通信方法的使用场景，还是有必要来了解一点它的历史。")]),t._v(" "),n("p",[t._v("在 Vue.js 1.x 中，提供了两个方法："),n("code",[t._v("$dispatch")]),t._v(" 和 "),n("code",[t._v("$broadcast")]),t._v(" ，前者用于向上级派发事件，只要是它的父级（一级或多级以上），都可以在组件内通过 "),n("code",[t._v("$on")]),t._v(" （或 events，2.x 已废弃）监听到，后者相反，是由上级向下级广播事件的。")]),t._v(" "),n("p",[t._v("来看一个简单的示例：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("\x3c!-- 注意：该示例为 Vue.js 1.x 版本 --\x3e\n\x3c!-- 子组件 --\x3e\n<template>\n  <button @click=\"handleDispatch\">派发事件</button>\n</template>\n<script>\nexport default {\n  methods: {\n    handleDispatch () {\n      this.$dispatch('test', 'Hello, Vue.js');\n    }\n  }\n}\n<\/script>\n\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("\x3c!-- 父组件，部分代码省略 --\x3e\n<template>\n  <child-component></child-component>\n</template>\n<script>\n  export default {\n    mounted () {\n      this.$on('test', (text) => {\n        console.log(text);  // Hello, Vue.js\n      });\n    }\n  }\n<\/script>\n\n")])])]),n("p",[t._v("$broadcast 类似，只不过方向相反。这两种方法一旦发出事件后，任何组件都是可以接收到的，就近原则，而且会在第一次接收到后停止冒泡，除非返回 true。")]),t._v(" "),n("p",[t._v("这两个方法虽然看起来很好用，但是在 Vue.js 2.x 中都废弃了，官方给出的解释是：")]),t._v(" "),n("blockquote",[n("p",[t._v("因为基于组件树结构的事件流方式有时让人难以理解，并且在组件结构扩展的过程中会变得越来越脆弱。")])]),t._v(" "),n("p",[t._v("虽然在业务开发中，它没有 Vuex 这样专门管理状态的插件清晰好用，但对独立组件（库）的开发，绝对是福音。因为独立组件一般层级并不会很复杂，并且剥离了业务，不会变的难以维护。")]),t._v(" "),n("p",[t._v("知道了 "),n("em",[t._v("$dispatch")]),t._v(" 和 "),n("em",[t._v("$broadcast")]),t._v(" 的前世今生，接下来我们就在 Vue.js 2.x 中自行实现这两个方法。")]),t._v(" "),n("h2",{attrs:{id:"自行实现-dispatch-和-broadcast-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自行实现-dispatch-和-broadcast-方法"}},[t._v("#")]),t._v(" 自行实现 dispatch 和 broadcast 方法")]),t._v(" "),n("p",[t._v("自行实现的 dispatch 和 broadcast 方法，不能保证跟 Vue.js 1.x 的 "),n("em",[t._v("$dispatch")]),t._v(" 和 "),n("em",[t._v("$broadcast")]),t._v(" 具有完全相同的体验，但基本功能是一样的，都是解决父子组件（含跨级）间的通信问题。")]),t._v(" "),n("p",[t._v("通过目前已知的信息，我们要实现的 dispatch 和 broadcast 方法，将具有以下功能：")]),t._v(" "),n("ul",[n("li",[t._v("在子组件调用 dispatch 方法，向上级指定的组件实例（最近的）上触发自定义事件，并传递数据，且该上级组件已预先通过 "),n("code",[t._v("$on")]),t._v(" 监听了这个事件；")]),t._v(" "),n("li",[t._v("相反，在父组件调用 broadcast 方法，向下级指定的组件实例（最近的）上触发自定义事件，并传递数据，且该下级组件已预先通过 "),n("code",[t._v("$on")]),t._v(" 监听了这个事件。")])]),t._v(" "),n("p",[t._v("实现这对方法的关键点在于，如何正确地向上或向下找到对应的组件实例，并在它上面触发方法。在设计一个新功能（features）时，可以先确定这个功能的 API 是什么，也就是说方法名、参数、使用样例，确定好 API，再来写具体的代码。")]),t._v(" "),n("p",[t._v("因为 Vue.js 内置的方法，才是以 "),n("code",[t._v("$")]),t._v(" 开头的，比如 "),n("code",[t._v("$nextTick")]),t._v("、"),n("code",[t._v("$emit")]),t._v(" 等，为了避免不必要的冲突并遵循规范，这里的 dispatch 和 broadcast 方法名前不加 "),n("code",[t._v("$")]),t._v("。并且该方法可能在很多组件中都会使用，复用起见，我们封装在混合（mixins）里。那它的使用样例可能是这样的：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 部分代码省略\nimport Emitter from '../mixins/emitter.js'\n\nexport default {\n  mixins: [ Emitter ],\n  methods: {\n    handleDispatch () {\n      this.dispatch();  // ①\n    },\n    handleBroadcast () {\n      this.broadcast();  // ②\n    }\n  }\n}\n\n")])])]),n("p",[t._v("上例中行 ① 和行 ② 的两个方法就是在导入的混合 "),n("strong",[t._v("emitter.js")]),t._v(" 中定义的，这个稍后我们再讲，先来分析这两个方法应该传入什么参数。一般来说，为了跟 Vue.js 1.x 的方法一致，第一个参数应当是自定义事件名，比如 “test”，第二个参数是传递的数据，比如 “Hello, Vue.js”，但在这里，有什么问题呢？只通过这两个参数，我们没办法知道要在哪个组件上触发事件，因为自行实现的这对方法，与 Vue.js 1.x 的原生方法机理上是有区别的。上文说到，实现这对方法的关键点在于准确地"),n("strong",[t._v("找到组件实例")]),t._v("。那在寻找组件实例上，我们的“惯用伎俩”就是通过遍历来匹配组件的 "),n("code",[t._v("name")]),t._v(" 选项，在独立组件（库）里，每个组件的 "),n("code",[t._v("name")]),t._v(" 值应当是唯一的，name 主要用于递归组件，在后面小节会单独介绍。")]),t._v(" "),n("p",[t._v("先来看下 "),n("strong",[t._v("emitter.js")]),t._v(" 的代码：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function broadcast(componentName, eventName, params) {\n  this.$children.forEach(child => {\n    const name = child.$options.name;\n\n    if (name === componentName) {\n      child.$emit.apply(child, [eventName].concat(params));\n    } else {\n      broadcast.apply(child, [componentName, eventName].concat([params]));\n    }\n  });\n}\nexport default {\n  methods: {\n    dispatch(componentName, eventName, params) {\n      let parent = this.$parent || this.$root;\n      let name = parent.$options.name;\n\n      while (parent && (!name || name !== componentName)) {\n        parent = parent.$parent;\n\n        if (parent) {\n          name = parent.$options.name;\n        }\n      }\n      if (parent) {\n        parent.$emit.apply(parent, [eventName].concat(params));\n      }\n    },\n    broadcast(componentName, eventName, params) {\n      broadcast.call(this, componentName, eventName, params);\n    }\n  }\n};\n\n")])])]),n("p",[t._v("因为是用作 mixins 导入，所以在 methods 里定义的 dispatch 和 broadcast 方法会被混合到组件里，自然就可以用 "),n("code",[t._v("this.dispatch")]),t._v(" 和 "),n("code",[t._v("this.broadcast")]),t._v(" 来使用。")]),t._v(" "),n("p",[t._v("这两个方法都接收了三个参数，第一个是组件的 "),n("code",[t._v("name")]),t._v(" 值，用于向上或向下递归遍历来寻找对应的组件，第二个和第三个就是上文分析的自定义事件名称和要传递的数据。")]),t._v(" "),n("p",[t._v("可以看到，在 dispatch 里，通过 "),n("em",[t._v("while")]),t._v(" 语句，不断向上遍历更新当前组件（即上下文为当前调用该方法的组件）的父组件实例（变量 parent 即为父组件实例），直到匹配到定义的 "),n("code",[t._v("componentName")]),t._v(" 与某个上级组件的 "),n("code",[t._v("name")]),t._v(" 选项一致时，结束循环，并在找到的组件实例上，调用 "),n("code",[t._v("$emit")]),t._v(" 方法来触发自定义事件 "),n("code",[t._v("eventName")]),t._v("。broadcast 方法与之类似，只不过是向下遍历寻找。")]),t._v(" "),n("p",[t._v("来看一下具体的使用方法。有 "),n("strong",[t._v("A.vue")]),t._v(" 和 "),n("strong",[t._v("B.vue")]),t._v(" 两个组件，其中 B 是 A 的子组件，中间可能跨多级，在 A 中向 B 通信：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("\x3c!-- A.vue --\x3e\n<template>\n\t<button @click=\"handleClick\">触发事件</button>\n</template>\n<script>\n  import Emitter from '../mixins/emitter.js';\n  \n  export default {\n    name: 'componentA',\n    mixins: [ Emitter ],\n    methods: {\n      handleClick () {\n        this.broadcast('componentB', 'on-message', 'Hello Vue.js');\n      }\n    }\n  }\n<\/script>\n\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// B.vue\nexport default {\n  name: 'componentB',\n  created () {\n    this.$on('on-message', this.showMessage);\n  },\n  methods: {\n    showMessage (text) {\n      window.alert(text);\n    }\n  }\n}\n\n")])])]),n("p",[t._v("同理，如果是 B 向 A 通信，在 B 中调用 dispatch 方法，在 A 中使用 $on 监听事件即可。")]),t._v(" "),n("p",[t._v("以上就是自行实现的 dispatch 和 broadcast 方法，相比 Vue.js 1.x，有以下不同：")]),t._v(" "),n("ul",[n("li",[t._v("需要额外传入组件的 name 作为第一个参数；")]),t._v(" "),n("li",[t._v("无冒泡机制；")]),t._v(" "),n("li",[t._v("第三个参数传递的数据，只能是一个（较多时可以传入一个对象），而 Vue.js 1.x 可以传入多个参数，当然，你对 emitter.js 稍作修改，也能支持传入多个参数，只是一般场景传入一个对象足以。")])]),t._v(" "),n("h2",{attrs:{id:"结语"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#结语"}},[t._v("#")]),t._v(" 结语")]),t._v(" "),n("p",[t._v("Vue.js 的组件通信到此还没完全结束，如果你想“趁热打铁”一口气看完，可以先阅读第 6 节组件的通信 3。亦或按顺序看下一节的实战，来进一步加深理解 provide / inject 和 dispatch / broadcast 这两对通信方法的使用场景。")]),t._v(" "),n("p",[t._v("注：本节部分代码参考 "),n("a",{attrs:{href:"https://github.com/iview/iview/blob/2.0/src/mixins/emitter.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("iView"),n("OutboundLink")],1),t._v("。")])])}),[],!1,null,null,null);e.default=s.exports}}]);